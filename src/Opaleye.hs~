{-# LANGUAGE Arrows, FlexibleContexts, FlexibleInstances,
             MultiParamTypeClasses, NoMonomorphismRestriction #-}

module Opaleye (
    module Karamaan.Opaleye.Reexports
  , module Karamaan.Opaleye.Table
  , module Karamaan.Opaleye.SQL
  , module Karamaan.Opaleye.Operators2
  , module Karamaan.Opaleye.RunQuery
  , module Control.Category
  , module Control.Arrow
  , module Data.Profunctor.Product
  , module Data.Profunctor.Product.Default
  , module Data.Profunctor.Product.TH
  , module Karamaan.Opaleye.Wire
  , module Karamaan.Opaleye.ExprArr
  , showQuery
  , restrictNullable
  ) where

import Prelude hiding (not)

import Data.Text (Text, unpack)
import Data.Time.Clock (UTCTime)
import Data.Time.LocalTime (LocalTime, localTimeToUTC, utc)
import Data.Time.Clock.POSIX (utcTimeToPOSIXSeconds)
import System.Time (ClockTime(TOD), toUTCTime)
import Control.Category ((<<<))

import Control.Arrow (returnA, second)
import Karamaan.Opaleye.Reexports
import Karamaan.Opaleye.Operators2 (not)
import Karamaan.Opaleye.Table (makeTableDef, Table(Table))
import Karamaan.Opaleye.SQL (showSqlForPostgresDefault)
import Karamaan.Opaleye.Unpackspec (Unpackspec)
import Karamaan.Opaleye.RunQuery (QueryRunner, fieldQueryRunner)
import Karamaan.Opaleye.Wire (Wire(Wire))
import Karamaan.Opaleye.ExprArr (ExprArr, Expr)

import Database.HaskellDB.Query (ShowConstant(..))
import Database.HaskellDB.PrimQuery (Literal(DateLit))
import Data.Profunctor.Product.TH (makeAdaptorAndInstance)
import Data.Profunctor.Product
import Data.Profunctor.Product.Default (Default, def)


instance ShowConstant Text where
  showConstant = showConstant . unpack

-- NOTE(dbp 2014-04-03): Ridiculous conversion because HaskellDB uses deprecated old-time library.
instance ShowConstant UTCTime where
  showConstant = DateLit . toUTCTime . uncurry TOD . second truncate
                         . properFraction . utcTimeToPOSIXSeconds

instance ShowConstant LocalTime where
  showConstant = DateLit . toUTCTime . uncurry TOD . second truncate
                         . properFraction . utcTimeToPOSIXSeconds . localTimeToUTC utc

showQuery :: Default (PPOfContravariant Unpackspec) a a
          => Query a
          -> IO ()
showQuery = putStrLn . showSqlForPostgresDefault

restrictNullable :: QueryArr (Wire a, Wire (Nullable a)) (Wire a)
restrictNullable = proc (d, i) -> do restrict <<< not <<< isNull -< i
                                     fromNullable -< (d, i)
